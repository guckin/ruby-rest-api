require_relative 'entities'

# { "id":"123abc", #A string generated by your API
#   "number": 5, #The the slip number, essentially the human understandable identifier
#   "current_boat":"abc555",  #The id of the current boat, null if empty
#   "arrival_date":"1/1/2015", #A string indicating the date the boat arrived in the slip
#   "departure_history":[{"departure_date":"11/4/2014","departed_boat":"123aaa"}...] #Optional for 5% extra credit a list of the dates that previous boats departed the slip
# }
class Slips < Entities
  ATTRIBUTES = %i[id number current_boat arrival_date departure_history].freeze

  def post(data)
    data = filter(data)
    data[:current_boat] = 'None'
    data[:number] = add_slip_number
    super data
  end

  def current_boat(id)
    get(id)[:current_boat]
  end

  def delete(id)
    return { service: 'bad id' } unless id_exists? id
    boat = current_boat(id)
    if boat != 'None' || !boat.nil?
      patch_data = { '$set' => { at_sea: true } }
      boats.update_one({ id: boat }, patch_data)
    end
    super id
  end

  def patch(id, data)
    return { service: 'bad id' } unless id_exists? id
    data = filter(data)
    if data.keys.include? :current_boat
      data[:arrival_date] = Time.now.to_s
      # todo: need to check if this is good id
      return { service: 'bad id' } unless id_exists? data[:current_boat]
      slip = slips.find(id: id)
      if slip.first[:current_boat] != 'None'
        old_slip = slip.first
        slips.update_one(
          { id: old_slip[:id] },
          '$set' => { current_boat: data[:current_boat] }
        )
        boats.update_one(
          { id: old_slip[:current_boat] },
          '$set' => { at_sea: true }
        )
      end
      boats.update_one({ id: data[:current_boat] }, '$set' => { at_sea: false })
    end
    super id, data
  end

  def put(id, data)
    return { service: 'bad id' } unless id_exists? id
    data = filter(data)
    data[:current_boat] = nil
    super id, data
  end

  private

  def add_slip_number
    number_exists = slip_number.find(id: 'slip_number').first
    if number_exists
      number = number_exists[:number]
      slip_number.update_one(
        { id: 'slip_number' },
        '$set' => { number: number + 1 }
      )
      number + 1
    else
      slip_number.insert_one(id: 'slip_number', number: 0)
      slip_number.find(id: 'slip_number').first[:number]
      0
    end
  end

end